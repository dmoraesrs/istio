#!/bin/bash
set -e

# Função para exibir todas as variáveis de ambiente relevantes
print_variables() {
  echo "=== Variáveis Definidas ==="
  echo "AZP_URL: ${AZP_URL}"
  echo "AZP_TOKEN: ${AZP_TOKEN:+(definido)}"  # Ocultar o valor real do token
  echo "AZP_TOKEN_FILE: ${AZP_TOKEN_FILE:-/azp/.token}"
  echo "AZP_WORK: ${AZP_WORK:-_work}"
  echo "AZP_AGENT_NAME: ${AZP_AGENT_NAME:-$(hostname)}"
  echo "AZP_POOL: ${AZP_POOL:-Default}"
  echo "TARGETARCH: ${TARGETARCH:-linux-x64}"
  echo "==========================="
}

# Verificando se AZP_URL está definida
if [ -z "$AZP_URL" ]; then
  echo "error: missing AZP_URL environment variable" 1>&2
  exit 1
fi

# Exibe as variáveis de ambiente para depuração
print_variables

# Verificando e criando diretório /azp com permissões adequadas
if [ ! -d "/azp" ]; then
  echo "Criando diretório /azp com permissões..."
  sudo mkdir -p /azp
  sudo chmod 777 /azp  # Use com cuidado em produção
fi

# Tratando a criação do token
if [ -z "$AZP_TOKEN_FILE" ]; then
  if [ -z "$AZP_TOKEN" ]; then
    echo "error: missing AZP_TOKEN environment variable" 1>&2
    exit 1
  fi

  AZP_TOKEN_FILE=/azp/.token
  echo -n "$AZP_TOKEN" > "$AZP_TOKEN_FILE" || {
    echo "Erro ao criar o token no arquivo /azp/.token" 1>&2
    exit 1
  }
  echo "Token gravado com sucesso em $AZP_TOKEN_FILE"
fi

unset AZP_TOKEN  # Limpando o token por segurança

# Criando diretório de trabalho, se necessário
if [ -n "$AZP_WORK" ]; then
  echo "Criando diretório de trabalho em $AZP_WORK..."
  mkdir -p "$AZP_WORK"
fi

export AGENT_ALLOW_RUNASROOT="1"

cleanup() {
  if [ -e config.sh ]; then
    echo "Removendo o agente Azure Pipelines..."
    while true; do
      ./config.sh remove --unattended --auth PAT --token "$(cat "$AZP_TOKEN_FILE")" && break
      echo "Retrying in 30 seconds..."
      sleep 30
    done
  fi
}

trap 'cleanup; exit 0' EXIT
trap 'cleanup; exit 130' INT
trap 'cleanup; exit 143' TERM

echo "1. Determinando o agente correspondente do Azure Pipelines..."

AZP_AGENT_PACKAGES=$(curl -LsS \
    -u "user:$(cat "$AZP_TOKEN_FILE")" \
    -H "Accept:application/json;" \
    "${AZP_URL}/_apis/distributedtask/packages/agent?platform=${TARGETARCH}&top=1")

AZP_AGENT_PACKAGE_LATEST_URL=$(echo "$AZP_AGENT_PACKAGES" | jq -r '.value[0].downloadUrl')

if [ -z "$AZP_AGENT_PACKAGE_LATEST_URL" ] || [ "$AZP_AGENT_PACKAGE_LATEST_URL" == "null" ]; then
  echo "error: could not determine a matching Azure Pipelines agent" 1>&2
  exit 1
fi

echo "2. Baixando e extraindo o agente Azure Pipelines..."
curl -LsS "$AZP_AGENT_PACKAGE_LATEST_URL" | tar -xz

source ./env.sh

echo "3. Configurando o agente Azure Pipelines..."
./config.sh --unattended \
  --agent "${AZP_AGENT_NAME:-$(hostname)}" \
  --url "$AZP_URL" \
  --auth PAT \
  --token "$(cat "$AZP_TOKEN_FILE")" \
  --pool "${AZP_POOL:-Default}" \
  --work "${AZP_WORK:-_work}" \
  --replace \
  --acceptTeeEula

echo "4. Executando o agente Azure Pipelines..."
chmod +x ./run.sh
./run.sh "$@" & wait $!
