apiVersion: apps/v1
kind: Deployment
metadata:
  name: azdevops-deployment
  namespace: azure-devops-agents
  labels:
    app: azure-agent-gke-dev
spec:
  replicas: 2 # Configuration to always keep one agent running
  selector:
    matchLabels:
      app: azure-agent-gke-dev
  template:
    metadata:
      labels:
        app: azure-agent-gke-dev
    spec:
      containers:
      - name: kubepodcreation
        image: imagensmbprd.azurecr.io/agent:129813
        env:
          - name: AZP_URL
            valueFrom:
              secretKeyRef:
                name: azdevops
                key: AZP_URL
          - name: AZP_TOKEN
            valueFrom:
              secretKeyRef:
                name: azdevops
                key: AZP_TOKEN
          - name: AZP_POOL
            valueFrom:
              secretKeyRef:
                name: azdevops
                key: AZP_POOL
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-volume
      volumes:
      - name: docker-volume
        hostPath:
          path: /var/run/docker.sock
        tolerations:
      - key: "purpose"
        operator: "Equal"
        value: "infra"
        effect: "NoExecute"
      imagePullSecrets:
      - name: docker-credentials





kubectl create secret generic azdevops \
  --from-literal=AZP_URL='https://dev.azure.com/your-organization' \
  --from-literal=AZP_TOKEN='your-pat-token' \
  --from-literal=AZP_POOL='your-agent-pool' \
  --namespace=azure-devops-agents




      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: layer
                operator: In
                values:
                - apps






FROM ubuntu:20.04

# Configurações para evitar prompts interativos durante a instalação
ENV DEBIAN_FRONTEND=noninteractive

# Atualiza os pacotes e instala dependências básicas
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y -qq --no-install-recommends \
    apt-transport-https \
    apt-utils \
    ca-certificates \
    curl \
    git \
    iputils-ping \
    jq \
    lsb-release \
    software-properties-common \
    libicu66 \
    unzip \
    gettext \
    python3-pip \
    npm \
    python3-setuptools \
    python3-venv && \
    rm -rf /var/lib/apt/lists/*

# Instala o AWS CLI v2
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && ./aws/install && rm -rf awscliv2.zip aws

# Instala o Helm
RUN curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
    chmod +x get_helm.sh && ./get_helm.sh && rm get_helm.sh

# Instala o Azure CLI
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash

# Instala o kubectl
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
    cp kubectl /usr/local/bin/ && chmod +x /usr/local/bin/kubectl && rm kubectl

# Instala o Docker
RUN curl -fsSL http://get.docker.com | bash

# Define a arquitetura de destino como uma variável de ambiente
ENV TARGETARCH=linux-x64

# Define o diretório de trabalho
WORKDIR /azp
